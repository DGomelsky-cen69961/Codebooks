# --------------------------------------------------------------------------
# Macros list
# --------------------------------------------------------------------------
# comma-separated list of macro names, the macros are processed in the same order as the are listed here
# !!! warning: the macro name should globally unique and one name must not be a prefix of another one !!!
macros=_ftextRegex,_ftextTableRegex,_ftextReplace,_ftextTableReplace,_ftextDoubleReplace,\
       _ftextRole_HintsCount_Regex,_ftextRole_HintsCount_Replace,\
       _ftextRole_Hints_Regex,_ftextRole_Hints_Replace,\
       _ftextRole_LeftJoin_Regex,_ftextRole_LeftJoin_Replace,\
       _ftextRole_ExistsInHints_Regex,_ftextRole_ExistsInHints_Replace

# Macros _ftextRegex and  _ftextReplace are used for replacing part of a query used to filter by specific "fulltext" columns by corresponding fulltext search subquery
# Note: we use subqueries with INDEX hint to sort-of force Oracle to use the corresponding fulltext domain index ,
# because if we used simple replacement ( lower(basicloan0_.LOAN_NUMBER) like ? -> contains(basicloan0_.LOAN_NUMBER, cms_utl_fulltext.escape_text_for_query(?) > 0),
# Oracle sometimes decided to use other index which lead to a suboptimal execution plan
#
# We also have to put the escape Oracle text special characters
# 
# so the used pattern is: lower(basicloan0_.LOAN_NUMBER) like ? -> (basicloan0_.LOAN_NUMBER in (select /*+ INDEX(t IX_CM_BSC_LN___FTX_LN_NM */ id from CMS_BASIC_LOAN t where (contains(t.basicloan0_.LOAN_NUMBER, cms_utl_fulltext.escape_text_for_query(?)) > 0))

# _ftextRegex macro defines the regex for fulltext replace
# Note: here we currently search only by the column name (see param __column__), if there were two different tables with same "fulltext" column,
# it would be not sufficient. So for this reason there is also a variant _ftextTableRegex/_ftextTableReplace, which somehow tries to find also the table name.
# To be sure that the filter is not incorrectly marched, it is also applied only if there is not the expression ".id=?" (implemented via fashNotMatch)
#
# The regex defines one group which is used to catch the alias used before the "fulltext" column (i.e. basicloan0_ for basicloan0_.LOAN_NUMBER)
# this group is the directly referred in the _ftextReplace macro
macro._ftextRegex.parameters=__column__
macro._ftextRegex.text=lower\\(([^\\.]+)\\.__column__\\) +like +\\?

macro._ftextTableRegex.parameters=__table__,__column__
macro._ftextTableRegex.text=(__table__ .*)lower\\(([^\\.]+)\\.__column__\\) +like +\\?

# _ftextReplace macro defines the replace part for fulltext replace
# it has the parameters which define the table and column, and also uses the capture group $1 defined in the regex ftextRegex
#
# Note: the order of parameters here is important, because it must then correspond to the order of parameters used in macro expansion - i.e.
# - for: macro.<macro_name>.parameters=<param_1>,<param_2>, ... 
# - the expansion call must be:  <macro_name>(<param_1>,<param_2>, ...)
macro._ftextReplace.parameters=__table__,__column__,__index__
# Note 2: currently it seems that the index hint actually sometimes produces bad execution plan, so we do not use it
#macro._ftextReplace.text=($1.id in (select /*+ INDEX(t __index__) */ id from __table__ t where (contains(t.__column__, cms_utl_fulltext.escape_text_for_query(?)) > 0)))
# currently used statement
macro._ftextReplace.text=($1.id in (select id from __table__ t where (contains(t.__column__, cms_utl_fulltext.escape_text_for_query(?)) > 0)))

macro._ftextTableReplace.parameters=__table__,__column__,__index__
macro._ftextTableReplace.text=$1($2.id in (select id from __table__ t where (contains(t.__column__, cms_utl_fulltext.escape_text_for_query(?)) > 0)))

# Warning: this double nested select was here because of a bug in Oracle fulltext ... when query transformation is applied, some
# strange null records were sometimes found - currently not used
macro._ftextDoubleReplace.parameters=__table__,__column__,__index__
macro._ftextDoubleReplace.text=($1.id in (select id from __table__ t2 where id in (select id from __table__ t where (contains(t.__column__, cms_utl_fulltext.escape_text_for_query(?)) > 0))))


# search by role pattern - the goal is to transform a query (which has been already pre-transformed by the firstRowsHint/_ftextRegex/Replace ), with the following
# structure (formatted, SQL keywords changed from lowercase to uppercase):
#
# SELECT /*+ FIRST_ROWS(1) */ *
# FROM
#  (SELECT 
#    ...  <list of all columns provided by hibernate>
#   FROM colmandata.CMS_COLLATERAL_ASSET collateral0_
#   LEFT OUTER JOIN colmandata.CMS_EVALUATION evaluation1_ ON collateral0_.ACTUAL_VALUATION_ID=evaluation1_.id
#   LEFT OUTER JOIN colmandata.CMS_COLL_SUBTYPE_SETTINGS collateral2_ ON collateral0_.COLLATERAL_TYPE_SETTINGS_ID=collateral2_.id
#   WHERE collateral0_.ASSET_ID<>:d
#     AND (EXISTS
#            (SELECT collateral5_1_.PARTNER_DESCRIPTION
#             FROM colmandata.CMS_COLLATERAL_ASSET collateral3_
#             LEFT OUTER JOIN colmandata.CMS_COLLATERAL collateral4_ ON collateral3_.id=collateral4_.COLLATERAL_ASSET_ID
#             LEFT OUTER JOIN colmandata.CMS_COLLATERAL_PROVIDER collateral5_ ON collateral4_.id=collateral5_.COLLATERAL_ID
#             LEFT OUTER JOIN colmandata.CMS_PARTNER_ROLE collateral5_1_ ON collateral5_.id=collateral5_1_.id
#             WHERE ((collateral5_1_.id IN
#                       (SELECT id
#                        FROM CMS_PARTNER_ROLE t
#                        WHERE (catsearch(t.PARTNER_DESCRIPTION, :c, '') > 0))))
#               AND collateral3_.id=collateral0_.id))
#   ORDER BY collateral0_.ASSET_ID DESC, collateral0_.id ASC)
#WHERE rownum <= :b;
#
# to a query:
# SELECT /*+ FIRST_ROWS(1) */
# FROM
#  (SELECT /*+ USE_NL(collateral0_) USE_NL(evaluation1_) USE_NL(collateral2_) */
#    ...  <list of all columns provided by hibernate>
#   FROM colmandata.CMS_COLLATERAL_ASSET collateral0_
#   LEFT OUTER JOIN colmandata.CMS_EVALUATION evaluation1_ ON collateral0_.ACTUAL_VALUATION_ID=evaluation1_.id
#   LEFT OUTER JOIN colmandata.CMS_COLL_SUBTYPE_SETTINGS collateral2_ ON collateral0_.COLLATERAL_TYPE_SETTINGS_ID=collateral2_.id
#   WHERE collateral0_.ASSET_ID<>:d
#     AND (collateral0_.id in
#            (SELECT /*+ CARDINALITY(20) LEADING(collateral5_1_ collateral5_ collateral4_ collateral3_) USE_NL(collateral3_ collateral4_ collateral5_) */
#             collateral3_.id
#             FROM colmandata.CMS_COLLATERAL_ASSET collateral3_
#             JOIN colmandata.CMS_COLLATERAL collateral4_ ON collateral3_.id=collateral4_.COLLATERAL_ASSET_ID
#             JOIN colmandata.CMS_COLLATERAL_PROVIDER collateral5_ ON collateral4_.id=collateral5_.COLLATERAL_ID
#             JOIN colmandata.CMS_PARTNER_ROLE collateral5_1_ ON collateral5_.id=collateral5_1_.id
#             WHERE ((collateral5_1_.id IN
#                       (SELECT id
#                        FROM CMS_PARTNER_ROLE t
#                        WHERE (catsearch(t.PARTNER_DESCRIPTION, :c, '') > 0))))
#	))
#   ORDER BY collateral0_.ASSET_ID DESC, collateral0_.id ASC)
#
# i.e. to perform the following steps (in this order):
# - add line with hints in the first nested query - done by _ftextRole_Hints_Regex/_ftextRole_Hints_Replace macros
# 	- there is also variant  _ftextRole_HintsCount_Regex/_ftextRole_HintsCount_Replace for the "count" version of the query:
#            SELECT count(collateral0_)
#            FROM colmandata.CMS_COLLATERAL_ASSET collateral0_
#            LEFT OUTER JOIN colmandata.CMS_EVALUATION evaluation1_ ON collateral0_.ACTUAL_VALUATION_ID=evaluation1_.id
#            ...<same as of the normal version>
#
# - replace LEFT OUTER JOIN by JOIN in the second nested query - done by _ftextRole_LeftJoin_Regex/_ftextRole_LeftJoin_Replace macros.
# 	- this macro can be used several times to remove multiple outer joins
# - replace EXISTS by IN clause and add hints in the second nested query - done by _ftextRole_ExistsInHints_Regex/_ftextRole_ExistsInHints_Replace macros

macro._ftextRole_HintsCount_Regex.parameters=__table__,__alias__
# note the [^\\+]* part is here to prevent expanding this rule rewrite more times in combined queries which contain multiple exists statements
macro._ftextRole_HintsCount_Regex.text=(select)( +)(count\\(__alias__.id\\).*from __table__ __alias__.* exists)

macro._ftextRole_HintsCount_Replace.parameters=__hint__
macro._ftextRole_HintsCount_Replace.text=$1 __hint__ $2 $3


macro._ftextRole_Hints_Regex.parameters=__table__,__alias__
# note the [^\\+]* part is here to prevent expanding this rule rewrite more times in combined queries which contain multiple exists statements
macro._ftextRole_Hints_Regex.text=(select +\\* +from +\\( +select)( +)(.*from __table__ __alias__.*exists)
macro._ftextRole_Hints_Replace.parameters=__hint__
macro._ftextRole_Hints_Replace.text=$1 __hint__ $2 $3

macro._ftextRole_LeftJoin_Regex.parameters=__toplevel__,__nested__
macro._ftextRole_LeftJoin_Regex.text=((\\(exists \\(select (?\!exists).*))(left outer)((?\!exists).*and __nested__\=__toplevel__)

macro._ftextRole_LeftJoin_Replace.parameters=
macro._ftextRole_LeftJoin_Replace.text=$1 $4

macro._ftextRole_ExistsInHints_Regex.parameters=__toplevel__,__nested__
macro._ftextRole_ExistsInHints_Regex.text=(\\(exists \\(select )([^ ]+)((?\!exists).*)(and __nested__\=__toplevel__)

macro._ftextRole_ExistsInHints_Replace.parameters=__toplevel__,__nested__,__hints__
macro._ftextRole_ExistsInHints_Replace.text=(__toplevel__ in (select __hints__ __nested__ $3


# --------------------------------------------------------------------------
# Groups list
# --------------------------------------------------------------------------

# comma-separated list of group names, the groups are processed in the same order as the are listed here
groups=searchScreens

# --------------------------------------------------------------------------
# searchScreens group definition - start
# --------------------------------------------------------------------------

# This group contains rules for amending queries in "search" screens.
# fastMatch... (fastMatchString, fastMatchString2, fastMatchString3, fastMatchString4) strings - if the SQL contains all of defined (not-null) fastMatchX values, then the rewrite rules in this group are applied

# fastNotMatch... (fastNotMatchString, fastNotMatchString2, fastNotMatchString3, fastNotMatchString4) strings - if the SQL contains any of defined (not-null) fastNotMatchX values, then the rewrite rules in this
#     groups are not evaluated against the SQL even if the "fast match" check passed.

# currently we do not have any better string for identification of the search screens that using of lower(...) like and not having any search-by-id expression (.id=?)
group.searchScreens.fastMatchString=lower(
group.searchScreens.fastMatchString2=like
group.searchScreens.fastNotMatchString=.id=?

# Comma-separated list of rewrite rules in the group, the rules are processed in the same order as the are listed here.
# ftext-... rules are used to replace "like" searches on a column by using a corresponding fulltext index
group.searchScreens.rewriteRules=\
                                 ftext-CMS_PARTNER__UNIFIED_NAME,ftext-CMS_PARTNER__IDENTIFIER,ftext-CMS_PARTNER__CLUID,ftext-CMS_PARTNER__ESSO_GROUP_CLUID,ftext-CMS_PARTNER__ESSO_GROUP_NAME,\
				 ftext-CMS_BASIC_LOAN__LOAN_NUMBER,ftext-CMS_BASIC_LOAN__LOAN_AGREEMENT_NUMBER,\
				 ftext-CMS_OTHER_AGREEMENT__PLEDGE_REGISTRAR_ENTRY_NO,ftext-CMS_OTHER_AGREEMENT__AGREEMENT_NUMBER,\
				 ftext-CMS_COLLATERAL__COLLATERAL_ID,ftext-CMS_COLLATERAL__AGREEMENT_NUMBER,\
				 ftext-CMS_COLLATERAL__PLEDGE_REGISTRAR_ENTRY_NO,\
				 ftext-CMS_COLLATERAL_ASSET__ASSET_ID,\
				 ftext-CMS_PARTNER_ROLE__PARTNER_DESCRIPTION,\
				 ftext-CMS_MODELING_ENTITY__MODEL_NAME,ftext-CMS_MODELING_ENTITY__APPLICATION_NUMBER,\
				 ftext-CMS_INSURANCE__INSURANCE_CONTRACT_NUMBER,\
  				 ftext-CMS_PARTNER__DESCRIPTION,\
				 searchCollateralAssetByProvider-Hints,searchCollateralAssetByProvider-HintsCount,\
				 searchCollateralAssetByProvider-LeftJoin-1-1,searchCollateralAssetByProvider-LeftJoin-1-2,searchCollateralAssetByProvider-LeftJoin-1-3,\
				 searchCollateralAssetByProvider-LeftJoin-2-1,searchCollateralAssetByProvider-LeftJoin-2-2,searchCollateralAssetByProvider-LeftJoin-2-3,\
				 searchCollateralAssetByProvider-ExistsInHints-1,searchCollateralAssetByProvider-ExistsInHints-2,\
				 firstRowsHint


# Column-specific rules
# --------------

# -----------
# CMS_PARTNER 
# -----------
# regex definition - please be aware of the fact that since this is a property file, ale back slashes must be doubled \ -> \\ 
group.searchScreens.rewriteRule.ftext-CMS_PARTNER__UNIFIED_NAME.ruleMatchRegex=_ftextRegex(UNIFIED_NAME)

# regex replace string definition - the groups defined in the regex are referred as $1, $2, ... 
group.searchScreens.rewriteRule.ftext-CMS_PARTNER__UNIFIED_NAME.ruleReplaceExpression=_ftextReplace(CMS_PARTNER,UNIFIED_NAME,IX_CMS_PRTNR___FTX_UNF_NM)

# defines, whether to replace all occurrences of the pattern or just a first occurrence. If not set then default value is true
group.searchScreens.rewriteRule.ftext-CMS_PARTNER__UNIFIED_NAME.replaceAll=true

# defines, whether to add an SQL comment containing the name of the rules if the rule has been applied. If not set then default value is false  
group.searchScreens.rewriteRule.ftext-CMS_PARTNER__UNIFIED_NAME.addSqlComment=true

# --------------
group.searchScreens.rewriteRule.ftext-CMS_PARTNER__IDENTIFIER.ruleMatchRegex=_ftextRegex(IDENTIFIER)
group.searchScreens.rewriteRule.ftext-CMS_PARTNER__IDENTIFIER.ruleReplaceExpression=_ftextReplace(CMS_PARTNER,IDENTIFIER,IX_CMS_PRTNR___FTX_IDNTFR)
group.searchScreens.rewriteRule.ftext-CMS_PARTNER__IDENTIFIER.replaceAll=true

# --------------
group.searchScreens.rewriteRule.ftext-CMS_PARTNER__CLUID.ruleMatchRegex=_ftextRegex(CLUID)
group.searchScreens.rewriteRule.ftext-CMS_PARTNER__CLUID.ruleReplaceExpression=_ftextReplace(CMS_PARTNER,CLUID,IX_CMS_PRTNR___FTX_CLD)
group.searchScreens.rewriteRule.ftext-CMS_PARTNER__CLUID.replaceAll=true

# --------------
group.searchScreens.rewriteRule.ftext-CMS_PARTNER__ESSO_GROUP_CLUID.ruleMatchRegex=_ftextRegex(ESSO_GROUP_CLUID)
group.searchScreens.rewriteRule.ftext-CMS_PARTNER__ESSO_GROUP_CLUID.ruleReplaceExpression=_ftextReplace(CMS_PARTNER,ESSO_GROUP_CLUID,IX_CMS_PRTNR___FTX_ESGRCL)
group.searchScreens.rewriteRule.ftext-CMS_PARTNER__ESSO_GROUP_CLUID.replaceAll=true

# --------------
group.searchScreens.rewriteRule.ftext-CMS_PARTNER__ESSO_GROUP_NAME.ruleMatchRegex=_ftextRegex(ESSO_GROUP_NAME)
group.searchScreens.rewriteRule.ftext-CMS_PARTNER__ESSO_GROUP_NAME.ruleReplaceExpression=_ftextReplace(CMS_PARTNER,ESSO_GROUP_NAME,IX_CMS_PRTNR___FTX_ESGRNM)
group.searchScreens.rewriteRule.ftext-CMS_PARTNER__ESSO_GROUP_NAME.replaceAll=true

# --------------
# CMS_BASIC_LOAN
# --------------
group.searchScreens.rewriteRule.ftext-CMS_BASIC_LOAN__LOAN_NUMBER.ruleMatchRegex=_ftextRegex(LOAN_NUMBER)
group.searchScreens.rewriteRule.ftext-CMS_BASIC_LOAN__LOAN_NUMBER.ruleReplaceExpression=_ftextDoubleReplace(CMS_BASIC_LOAN,LOAN_NUMBER,IX_CM_BSC_LN___FTX_LN_NM)
group.searchScreens.rewriteRule.ftext-CMS_BASIC_LOAN__LOAN_NUMBER.replaceAll=true

# --------------
group.searchScreens.rewriteRule.ftext-CMS_BASIC_LOAN__LOAN_AGREEMENT_NUMBER.ruleMatchRegex=_ftextRegex(LOAN_AGREEMENT_NUMBER)
group.searchScreens.rewriteRule.ftext-CMS_BASIC_LOAN__LOAN_AGREEMENT_NUMBER.ruleReplaceExpression=_ftextDoubleReplace(CMS_BASIC_LOAN,LOAN_AGREEMENT_NUMBER,IX_CM_BSC_LN___FTX_LN_AGN)
group.searchScreens.rewriteRule.ftext-CMS_BASIC_LOAN__LOAN_AGREEMENT_NUMBER.replaceAll=true

# --------------
# CMS_OTHER_AGREEMENT
# --------------
group.searchScreens.rewriteRule.ftext-CMS_OTHER_AGREEMENT__PLEDGE_REGISTRAR_ENTRY_NO.ruleMatchRegex=_ftextTableRegex(CMS_OTHER_AGREEMENT,PLEDGE_REGISTRAR_ENTRY_NO)
group.searchScreens.rewriteRule.ftext-CMS_OTHER_AGREEMENT__PLEDGE_REGISTRAR_ENTRY_NO.ruleReplaceExpression=_ftextTableReplace(CMS_OTHER_AGREEMENT,PLEDGE_REGISTRAR_ENTRY_NO,IX_CM_OTHR_AG__PLDG_RGSTR)
group.searchScreens.rewriteRule.ftext-CMS_OTHER_AGREEMENT__PLEDGE_REGISTRAR_ENTRY_NO.replaceAll=true

# --------------
group.searchScreens.rewriteRule.ftext-CMS_OTHER_AGREEMENT__AGREEMENT_NUMBER.ruleMatchRegex=_ftextRegex(AGREEMENT_NUMBER)
group.searchScreens.rewriteRule.ftext-CMS_OTHER_AGREEMENT__AGREEMENT_NUMBER.ruleReplaceExpression=_ftextDoubleReplace(CMS_OTHER_AGREEMENT,AGREEMENT_NUMBER,IX_CM_OTHR_AG__AGR_NM)
group.searchScreens.rewriteRule.ftext-CMS_OTHER_AGREEMENT__AGREEMENT_NUMBER.replaceAll=true

# --------------
# CMS_COLLATERAL
# --------------
group.searchScreens.rewriteRule.ftext-CMS_COLLATERAL__COLLATERAL_ID.ruleMatchRegex=_ftextRegex(COLLATERAL_ID)
group.searchScreens.rewriteRule.ftext-CMS_COLLATERAL__COLLATERAL_ID.ruleReplaceExpression=_ftextDoubleReplace(CMS_COLLATERAL,COLLATERAL_ID,IX_CM_CLLTRL___FTX_CL_ID)
group.searchScreens.rewriteRule.ftext-CMS_COLLATERAL__COLLATERAL_ID.replaceAll=true

# --------------
group.searchScreens.rewriteRule.ftext-CMS_COLLATERAL__AGREEMENT_NUMBER.ruleMatchRegex=_ftextRegex(AGREEMENT_NUMBER)
group.searchScreens.rewriteRule.ftext-CMS_COLLATERAL__AGREEMENT_NUMBER.ruleReplaceExpression=_ftextDoubleReplace(CMS_COLLATERAL,AGREEMENT_NUMBER,IX_CM_CLLTRL___FTX_AGR_NM)
group.searchScreens.rewriteRule.ftext-CMS_COLLATERAL__AGREEMENT_NUMBER.replaceAll=true
# --------------
group.searchScreens.rewriteRule.ftext-CMS_COLLATERAL__PLEDGE_REGISTRAR_ENTRY_NO.ruleMatchRegex=_ftextRegex(PLEDGE_REGISTRAR_ENTRY_NO)
group.searchScreens.rewriteRule.ftext-CMS_COLLATERAL__PLEDGE_REGISTRAR_ENTRY_NO.ruleReplaceExpression=_ftextDoubleReplace(CMS_COLLATERAL,PLEDGE_REGISTRAR_ENTRY_NO,IX_CM_CLLTRL___PLDG_RGSTR)
group.searchScreens.rewriteRule.ftext-CMS_COLLATERAL__PLEDGE_REGISTRAR_ENTRY_NO.replaceAll=true

# --------------------
# CMS_COLLATERAL_ASSET
# --------------------
group.searchScreens.rewriteRule.ftext-CMS_COLLATERAL_ASSET__ASSET_ID.ruleMatchRegex=_ftextRegex(ASSET_ID)
group.searchScreens.rewriteRule.ftext-CMS_COLLATERAL_ASSET__ASSET_ID.ruleReplaceExpression=_ftextDoubleReplace(CMS_COLLATERAL_ASSET,ASSET_ID,IX_CM_CLL_AS___FTX_AS_ID)
group.searchScreens.rewriteRule.ftext-CMS_COLLATERAL_ASSET__ASSET_ID.replaceAll=true

# ----------------
# CMS_PARTNER_ROLE
# ----------------
group.searchScreens.rewriteRule.ftext-CMS_PARTNER_ROLE__PARTNER_DESCRIPTION.ruleMatchRegex=_ftextRegex(PARTNER_DESCRIPTION)
group.searchScreens.rewriteRule.ftext-CMS_PARTNER_ROLE__PARTNER_DESCRIPTION.ruleReplaceExpression=_ftextReplace(CMS_PARTNER_ROLE,PARTNER_DESCRIPTION,IX_CMS_PRT_RL___FTX_P_DSC)
group.searchScreens.rewriteRule.ftext-CMS_PARTNER_ROLE__PARTNER_DESCRIPTION.replaceAll=true

# -------------------
# CMS_MODELING_ENTITY
# -------------------
group.searchScreens.rewriteRule.ftext-CMS_MODELING_ENTITY__MODEL_NAME.ruleMatchRegex=_ftextRegex(MODEL_NAME)
group.searchScreens.rewriteRule.ftext-CMS_MODELING_ENTITY__MODEL_NAME.ruleReplaceExpression=_ftextDoubleReplace(CMS_MODELING_ENTITY,MODEL_NAME,IX_CM_MDL_ENT___FTX_MD_NM)
group.searchScreens.rewriteRule.ftext-CMS_MODELING_ENTITY__MODEL_NAME.replaceAll=true

# --------------
group.searchScreens.rewriteRule.ftext-CMS_MODELING_ENTITY__APPLICATION_NUMBER.ruleMatchRegex=_ftextRegex(APPLICATION_NUMBER)
group.searchScreens.rewriteRule.ftext-CMS_MODELING_ENTITY__APPLICATION_NUMBER.ruleReplaceExpression=_ftextDoubleReplace(CMS_MODELING_ENTITY,APPLICATION_NUMBER,IX_CM_MDL_ENT___FTX_AP_NM)
group.searchScreens.rewriteRule.ftext-CMS_MODELING_ENTITY__APPLICATION_NUMBER.replaceAll=true

# -------------
# CMS_INSURANCE
# -------------
group.searchScreens.rewriteRule.ftext-CMS_INSURANCE__INSURANCE_CONTRACT_NUMBER.ruleMatchRegex=_ftextRegex(INSURANCE_CONTRACT_NUMBER)
group.searchScreens.rewriteRule.ftext-CMS_INSURANCE__INSURANCE_CONTRACT_NUMBER.ruleReplaceExpression=_ftextReplace(CMS_INSURANCE,INSURANCE_CONTRACT_NUMBER,IX_CM_INS___FTX_IN_CN_NM)
group.searchScreens.rewriteRule.ftext-CMS_INSURANCE__INSURANCE_CONTRACT_NUMBER.replaceAll=true

# ----------------
# CMS_PARTNER
# ----------------
group.searchScreens.rewriteRule.ftext-CMS_PARTNER__DESCRIPTION.ruleMatchRegex=_ftextTableRegex(CMS_PARTNER,DESCRIPTION)
group.searchScreens.rewriteRule.ftext-CMS_PARTNER__DESCRIPTION.ruleReplaceExpression=_ftextTableReplace(CMS_PARTNER,DESCRIPTION,IX_CMS_PRTNR___FTX_DSCR)
group.searchScreens.rewriteRule.ftext-CMS_PARTNER__DESCRIPTION.replaceAll=true


# -------------
# search a collateral asset by provider - specific rewrite where "exists" query is rewritten to "in" query
# -------------

group.searchScreens.rewriteRule.searchCollateralAssetByProvider-Hints.ruleMatchRegex=_ftextRole_Hints_Regex(colmandata.CMS_COLLATERAL_ASSET,collateral0_)
group.searchScreens.rewriteRule.searchCollateralAssetByProvider-Hints.ruleReplaceExpression=_ftextRole_Hints_Replace("/*+ FIRST_ROWS(1) USE_NL(collateral0_) USE_NL(evaluation1_) USE_NL(collateral2_) */")
group.searchScreens.rewriteRule.searchCollateralAssetByProvider-Hints.replaceAll=false

group.searchScreens.rewriteRule.searchCollateralAssetByProvider-HintsCount.ruleMatchRegex=_ftextRole_HintsCount_Regex(colmandata.CMS_COLLATERAL_ASSET,collateral0_)
group.searchScreens.rewriteRule.searchCollateralAssetByProvider-HintsCount.ruleReplaceExpression=_ftextRole_HintsCount_Replace("/*+ FIRST_ROWS(1) USE_NL(collateral0_) USE_NL(evaluation1_) USE_NL(collateral2_) */")
group.searchScreens.rewriteRule.searchCollateralAssetByProvider-HintsCount.replaceAll=false

# basic variant for search
group.searchScreens.rewriteRule.searchCollateralAssetByProvider-LeftJoin-1-1.ruleMatchRegex=_ftextRole_LeftJoin_Regex(collateral0_.id,collateral3_.id)
group.searchScreens.rewriteRule.searchCollateralAssetByProvider-LeftJoin-1-1.ruleReplaceExpression=_ftextRole_LeftJoin_Replace()
group.searchScreens.rewriteRule.searchCollateralAssetByProvider-LeftJoin-1-1.replaceAll=false

group.searchScreens.rewriteRule.searchCollateralAssetByProvider-LeftJoin-1-2.ruleMatchRegex=_ftextRole_LeftJoin_Regex(collateral0_.id,collateral3_.id)
group.searchScreens.rewriteRule.searchCollateralAssetByProvider-LeftJoin-1-2.ruleReplaceExpression=_ftextRole_LeftJoin_Replace()
group.searchScreens.rewriteRule.searchCollateralAssetByProvider-LeftJoin-1-2.replaceAll=false


group.searchScreens.rewriteRule.searchCollateralAssetByProvider-LeftJoin-1-3.ruleMatchRegex=_ftextRole_LeftJoin_Regex(collateral0_.id,collateral3_.id)
group.searchScreens.rewriteRule.searchCollateralAssetByProvider-LeftJoin-1-3.ruleReplaceExpression=_ftextRole_LeftJoin_Replace()
group.searchScreens.rewriteRule.searchCollateralAssetByProvider-LeftJoin-1-3.replaceAll=false

group.searchScreens.rewriteRule.searchCollateralAssetByProvider-ExistsInHints-1.ruleMatchRegex=_ftextRole_ExistsInHints_Regex(collateral0_.id,collateral3_.id)
group.searchScreens.rewriteRule.searchCollateralAssetByProvider-ExistsInHints-1.ruleReplaceExpression=_ftextRole_ExistsInHints_Replace(collateral0_.id,collateral3_.id,"/*+ CARDINALITY(20) LEADING(collateral5_1_ collateral5_ collateral4_ collateral3_) USE_NL(collateral3_ collateral4_ collateral5_) */")
group.searchScreens.rewriteRule.searchCollateralAssetByProvider-ExistsInHints-1.replaceAll=false

# more advanced variant when some order by with a code value is involved
group.searchScreens.rewriteRule.searchCollateralAssetByProvider-LeftJoin-2-1.ruleMatchRegex=_ftextRole_LeftJoin_Regex(collateral0_.id,collateral6_.id)
group.searchScreens.rewriteRule.searchCollateralAssetByProvider-LeftJoin-2-1.ruleReplaceExpression=_ftextRole_LeftJoin_Replace()
group.searchScreens.rewriteRule.searchCollateralAssetByProvider-LeftJoin-2-1.replaceAll=false

group.searchScreens.rewriteRule.searchCollateralAssetByProvider-LeftJoin-2-2.ruleMatchRegex=_ftextRole_LeftJoin_Regex(collateral0_.id,collateral6_.id)
group.searchScreens.rewriteRule.searchCollateralAssetByProvider-LeftJoin-2-2.ruleReplaceExpression=_ftextRole_LeftJoin_Replace()
group.searchScreens.rewriteRule.searchCollateralAssetByProvider-LeftJoin-2-2.replaceAll=false

group.searchScreens.rewriteRule.searchCollateralAssetByProvider-LeftJoin-2-3.ruleMatchRegex=_ftextRole_LeftJoin_Regex(collateral0_.id,collateral6_.id)
group.searchScreens.rewriteRule.searchCollateralAssetByProvider-LeftJoin-2-3.ruleReplaceExpression=_ftextRole_LeftJoin_Replace()
group.searchScreens.rewriteRule.searchCollateralAssetByProvider-LeftJoin-2-3.replaceAll=false


group.searchScreens.rewriteRule.searchCollateralAssetByProvider-ExistsInHints-2.ruleMatchRegex=_ftextRole_ExistsInHints_Regex(collateral0_.id,collateral6_.id)
group.searchScreens.rewriteRule.searchCollateralAssetByProvider-ExistsInHints-2.ruleReplaceExpression=_ftextRole_ExistsInHints_Replace(collateral0_.id,collateral6_.id,"/*+ CARDINALITY(20) LEADING(collateral8_1_ collateral8_ collateral7_ collateral6_) USE_NL(collateral6_ collateral7_ collateral8_) */")
group.searchScreens.rewriteRule.searchCollateralAssetByProvider-ExistsInHints-2.replaceAll=false


# Adding first_rows hint
# --------------
group.searchScreens.rewriteRule.firstRowsHint.ruleMatchRegex=(select.)
group.searchScreens.rewriteRule.firstRowsHint.ruleReplaceExpression=$1 /*+ FIRST_ROWS(1) */ 
group.searchScreens.rewriteRule.firstRowsHint.replaceAll=false

# --------------------------------------------------------------------------
# searchScreens group definition - end
# --------------------------------------------------------------------------

