<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:batch="http://www.springframework.org/schema/batch"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/batch
		http://www.springframework.org/schema/batch/spring-batch-2.2.xsd
		http://www.springframework.org/schema/beans
		http://www.springframework.org/schema/beans/spring-beans-3.2.xsd">

	<bean id="propertyPlaceholderConfigurer" class="cz.csas.colmanbatch.springutil.WebDpCompatPropertyPlaceholderConfigurer" lazy-init="false">
		<property name="locations">
			<list>
				<value>classpath:batch.properties</value>
                <value>classpath:application.properties</value>
				<value>classpath:CrmExport_cleanup_prod_1.properties</value>
			</list>
		</property>
	</bean>

    <import resource="classpath:addons-context.xml" />

    <import resource="classpath:addons-exports-parents.xml" />


	<batch:job id="CrmExport_cleanup_prod_1">
  	<batch:decision id="decision" decider="parentDecider">
			<batch:end on="END" />
			<batch:fail on="FAILED" />
			<batch:next on="DEFAULT_START" to="step1" />
						
			<batch:next on="START:step1" to="step1" /> 
			<batch:next on="COMPLETED:step1" to="step2" /> 
			
			<batch:next on="START:step2" to="step2" /> 
			<batch:next on="COMPLETED:step2" to="step3" />
			
			<batch:next on="START:step3" to="step3" /> 
			<batch:next on="COMPLETED:step3" to="step4" />
			
			<batch:next on="START:step4" to="step4" /> 
			<batch:next on="COMPLETED:step4" to="step5" />
			
			<batch:next on="START:step5" to="step5" /> 
			<batch:next on="COMPLETED:step5" to="step6" />
			
			<batch:next on="START:step6" to="step6" /> 
			<batch:next on="COMPLETED:step6" to="CrmExport_cleanup_prod_1TypeStep" />
			
			<batch:next on="START:CrmExport_cleanup_prod_1TypeStep" to="CrmExport_cleanup_prod_1TypeStep" /> 
			<batch:next on="COMPLETED:CrmExport_cleanup_prod_1TypeStep" to="step8" />
			
			<batch:next on="START:step8" to="step8" /> 
			<batch:next on="COMPLETED:step8" to="step9" />
			
			<batch:next on="START:step9" to="step9" /> 
			<batch:next on="COMPLETED:step9" to="step10" />
			
			<batch:next on="START:step10" to="step10" /> 
			<batch:next on="COMPLETED:step10" to="step11" />
			
			<batch:next on="START:step11" to="step11" /> 
			<batch:end on="COMPLETED:step11"/>
			

    	</batch:decision>	
    	
		<batch:step id="step1" next="decision">
			<batch:tasklet ref="step1Task" />
		</batch:step>
		
		<batch:step id="step2" next="decision">
			<batch:tasklet ref="step2Task" />
		</batch:step>
		
		<batch:step id="step3" next="decision">
			<batch:tasklet ref="step3Task" />
		</batch:step>
		
		<batch:step id="step4" next="decision">
			<batch:tasklet ref="step4Task" />
		</batch:step>
		
		<batch:step id="step5" next="decision">
			<batch:tasklet ref="step5Task" />
		</batch:step>
		
		<batch:step id="step6" next="decision">
			<batch:tasklet ref="step6Task" />
		</batch:step>
		
		
		<batch:step id="CrmExport_cleanup_prod_1TypeStep" parent="parentConvert" next="decision">
			<batch:tasklet>
				<batch:chunk reader="CrmExport_cleanup_prod_1Reader" processor="CrmExport_cleanup_prod_1Processor" writer="CrmExport_cleanup_prod_1Writer" />
				<batch:listeners>
					<batch:listener ref="CrmExport_cleanup_prod_1CsopsHeaderFileCallback" />		
				</batch:listeners>					
			</batch:tasklet>
		</batch:step>
		
		<batch:step id="step8" next="decision">
			<batch:tasklet ref="step8Task" />
		</batch:step>
		
		<batch:step id="step9" next="decision">
			<batch:tasklet ref="step9Task" />
		</batch:step>
		
		<batch:step id="step10" next="decision">
			<batch:tasklet ref="step10Task" />
		</batch:step>
		
		<batch:step id="step11" next="decision">
			<batch:tasklet ref="step11Task" />
		</batch:step>
		
	<batch:listeners>
		<batch:listener ref="CrmExport_cleanup_prod_1Manager" />	
	</batch:listeners>	
			
	</batch:job>    

	<bean id="step1Task" class="cz.csas.colmanbatch.task.StoredProcedureTask" scope="step">
		<property name="sql">
			<value>
<![CDATA[
BEGIN
/* -- step 1 - generate the DEL for cases where there is no executed real estate pledged or it was due to the change of ownership... */
insert into cms_wd_re_execution (
CADASTRE_PROCEDURE_NUMBER,
CHANGE_TYPE,
CLUID,
REAL_ESTATE_ID
)
select
distinct 
exec.cadastre_procedure_number || ' oprava chyby' cadastre_procedure_number,
'DEL' change_type,
exec.cluid cluid,
exec.REAL_ESTATE_ID REAL_ESTATE_ID
from 
cms_wd_re_execution exec 
where 1=1
and exec.change_type = 'INS'
minus
(
select
distinct 
exec.cadastre_procedure_number || ' oprava chyby' cadastre_procedure_number,
'DEL' change_type,
exec.cluid cluid,
exec.REAL_ESTATE_ID REAL_ESTATE_ID
from 
cms_wd_re_execution exec
join cms_wd_procedure cp on cp.cadastre_procedure_number = exec.cadastre_procedure_number
join CMS_WD_MESSAGE m on m.CADASTRE_PROCEDURE_ID = cp.id
join CMS_WD_CADASTRE_EVENT e on e.MESSAGE_ID = m.id
join CMS_WD_CHANGE CH ON CH.EVENT_ID = E.ID
JOIN CMS_WD_RE_JPV JPV ON JPV.ID = CH.ID
JOIN CMS_WD_PARTNER PAR_TO ON PAR_TO.ID = JPV.PARTY_WITH_RELATIONSHIP_TO_ID
JOIN CMS_WD_PARTNER_MATCH pm on pm.watchdog_partner_id = par_to.id
join cms_partner_role pr on pr.id = pm.id
join cms_partner p on p.id = pr.partner_id and p.cluid = exec.cluid
JOIN CMS_WD_ABSTRACT_RE ARE ON ARE.ID = JPV.REAL_ESTATES_RELATED_TO_ID and are.REAL_ESTATE_ID = exec.REAL_ESTATE_ID
join cms_re_asset_item reai on reai.real_estate_id = are.real_estate_id
join cms_collateral_Asset_item ai on ai.id = reai.id
join cms_collateral_asset a on a.id = ai.asset_id
join cms_collateral c on c.collateral_asset_id = a.id
join CMS_RE_PLEDGER pled on pled.FUNCTIONAL_UNIT_ID = a.id and pled.REAL_ESTATE_ASSET_ITEM_ID = reai.id
join cms_partner_role pr1 on pr1.id = pled.id
join cms_partner p1 on p1.id = pr1.partner_id and p1.cluid = exec.cluid
WHERE 1=1
and (p1.cluid = p.cluid)
and c.state in ('preactivated', 'activated', 'approved' )
and ch.change_type in ('INS')
and PAR_TO.match_quality = 'ONE'
AND JPV.CADASTRE_LEGAL_REL_TYPE IN
('104','105','106','135','163','164','169','170','171','172','173','174','239','240','241','252','253','259') 
and cp.id <= (select VALUE from wdp_system_property where id = 'cscollateral/watchdog/WatchdogLastExecutionWarningMessageId')
union
select
distinct 
exec.cadastre_procedure_number || ' oprava chyby' cadastre_procedure_number,
'DEL' change_type,
exec.cluid cluid,
exec.REAL_ESTATE_ID REAL_ESTATE_ID
from 
cms_wd_re_execution exec
join cms_wd_procedure cp on cp.cadastre_procedure_number = exec.cadastre_procedure_number
join CMS_WD_MESSAGE m on m.CADASTRE_PROCEDURE_ID = cp.id
join CMS_WD_CADASTRE_EVENT e on e.MESSAGE_ID = m.id
join CMS_WD_CHANGE CH ON CH.EVENT_ID = E.ID
JOIN CMS_WD_RE_JPV JPV ON JPV.ID = CH.ID
JOIN CMS_WD_ABSTRACT_RE ARE ON ARE.ID = JPV.REAL_ESTATES_RELATED_TO_ID and are.REAL_ESTATE_ID = exec.REAL_ESTATE_ID
join cms_re_asset_item reai on reai.real_estate_id = are.real_estate_id 
 join cms_collateral_Asset_item ai on ai.id = reai.id
join cms_collateral_asset a on a.id = ai.asset_id
join cms_collateral c on c.collateral_asset_id = a.id
join CMS_RE_PLEDGER pled on pled.FUNCTIONAL_UNIT_ID = a.id and pled.REAL_ESTATE_ASSET_ITEM_ID = reai.id
join cms_partner_role pr1 on pr1.id = pled.id
join cms_partner p1 on p1.id = pr1.partner_id and p1.cluid = exec.cluid
WHERE 1=1
and c.state in ('preactivated', 'activated', 'approved' )
and pr1.sjm_partner_id is null
and JPV.PARTY_WITH_RELATIONSHIP_TO_ID is null
and ch.change_type in ('INS')
AND JPV.CADASTRE_LEGAL_REL_TYPE IN
('104','105','106','135','163','164','169','170','171','172','173','174','239','240','241','252','253','259') 
and (select count(*) from CMS_RE_Share intres where intres.PROPERTY_CERTIFICATE_ID = reai.property_certificate_id) = 1 
and cp.id <= (select VALUE from wdp_system_property where id = 'cscollateral/watchdog/WatchdogLastExecutionWarningMessageId')
)
union
select 
distinct 
toexec.cadastre_procedure_number || ' oprava chyby'  cadastre_procedure_number,
'DEL' change_type,
toexec.cluid cluid,
toexec.REAL_ESTATE_ID REAL_ESTATE_ID
from 
cms_wd_re_execution fromExec
join cms_wd_re_execution toExec on fromexec.cadastre_procedure_number = toexec.cadastre_procedure_number and fromexec.real_estate_id = toexec.real_estate_id 
and fromexec.cluid != toexec.cluid and fromExec.change_Type = 'DEL' and toExec.change_Type = 'INS'
where 1=1
;
END;
]]>
			</value>
		</property>
	</bean>		
	
	<bean id="step2Task" class="cz.csas.colmanbatch.task.StoredProcedureTask" scope="step">
		<property name="sql">
			<value>
<![CDATA[
BEGIN
/* -- step 2 -- reset the current statistics for all cluids */
update cms_wd_re_execution_stats s SET
curr_ins = 0,
curr_del = 0
WHERE 1=1
;
END;
]]>
			</value>
		</property>
	</bean>		
	
	<bean id="step3Task" class="cz.csas.colmanbatch.task.StoredProcedureTask" scope="step">
		<property name="sql">
			<value>
<![CDATA[
BEGIN
/* -- step 3 - create the statistics for brand new cluids - should not create anything*/
insert into cms_wd_re_execution_stats (
cluid,
last_ins,
last_del,
curr_ins,
curr_del,
alert_source_id
)
select
x.cluid,
0,
0,
0,
0,
hibernate_sequence.nextval
from (
  select
  distinct
  e.cluid
  from 
  cms_wd_re_execution e
  left join cms_wd_re_execution_stats s on e.cluid = s.cluid
  where 1=1
  and s.cluid is null
) x
;
END;
]]>
			</value>
		</property>
	</bean>		
	
	<bean id="step4Task" class="cz.csas.colmanbatch.task.StoredProcedureTask" scope="step">
		<property name="sql">
			<value>
<![CDATA[
BEGIN
/* -- step 4 - calculate the new statistics  - curr_ins (how many inserts we currently have) */
MERGE INTO cms_wd_re_execution_stats S
USING 
(SELECT CLUID, COUNT(*) POCET FROM cms_wd_re_execution WHERE change_type = 'INS' GROUP BY CLUID) E
ON (E.CLUID = S.CLUID)
WHEN MATCHED THEN UPDATE SET S.curr_ins = E.POCET
;
END;
]]>
			</value>
		</property>
	</bean>	
	
	<bean id="step5Task" class="cz.csas.colmanbatch.task.StoredProcedureTask" scope="step">
		<property name="sql">
			<value>
<![CDATA[
BEGIN
/* -- step 5 - calculate the new statistics  - curr_del (how many deletes we currently have) */
MERGE INTO cms_wd_re_execution_stats S
USING 
(SELECT CLUID, COUNT(*) POCET FROM cms_wd_re_execution WHERE change_type = 'DEL' GROUP BY CLUID) E
ON (E.CLUID = S.CLUID)
WHEN MATCHED THEN UPDATE SET S.curr_del = E.POCET
;
END;
]]>
			</value>
		</property>
	</bean>	
	
	<bean id="step6Task" class="cz.csas.colmanbatch.task.StoredProcedureTask" scope="step">
		<property name="sql">
			<value>
<![CDATA[
BEGIN
/* -- step 6 - remove the records which were just created but are instantly deleted... i.e. the execution was created and is resolved immediately... should not delete anything*/
delete from cms_wd_re_execution_stats where last_ins = 0 and last_del = 0 and curr_ins <= curr_del;
END;
]]>
			</value>
		</property>
	</bean>	
	
<!-- ================ CrmExport_cleanup_prod_1 ================ -->
	<bean id="CrmExport_cleanup_prod_1Reader" parent="parentSqlExportReader" scope="step">
		<property name="sql">
			<value>
<![CDATA[
select 
'N' INS_FLG,
'N' UPD_FLG,
'Y' DEL_FLG,
x.cluid PT_UNIQUE_PARTY_ID,
x.pt_type PT_TYPE, -- Type of client (F/P)
'CN0' SOURCE_SYSTEM_ID,
x.SOURCE_SYSTEM_RECORD_ID SOURCE_ID, -- Unique ID from external system
'5' CATEGORY, -- SA_ALERT_CATEGORY lookup map, LOV CSAS_ALERT_SPEC
'157' PN_TYPE, -- SA_ALERT_TYPE  lookup map, LOV CSAS_ALERT_SPEC
'Na klienta a nemovitost byla chybně vystaveno varování o exekuci, které bylo systémovým zásahem ukončeno. Varování nebylo relevantní. ' || CALMESSAGE PN_NOTE,
to_char(x.valid_from, 'yyyymmdd') START_DT,
REPLACE(x.ALERT_COMMENT, '|', '_') PN_COMMENT
from 
  (
  select 
  cluid, 
  cadastre_procedure_number,
  pt_type,
  SOURCE_SYSTEM_RECORD_ID,
  valid_from,
  ALERT_COMMENT,
  CALMESSAGE
  from  
    (
    select distinct 
    e.cluid cluid,
    e.cadastre_procedure_number cadastre_procedure_number,
    min(case when p.business_entity_descriptor_id = 'cscollateral/Organization' then 'P' else 'F' end) pt_type,
    min(cal.SOURCE_SYSTEM_RECORD_ID) SOURCE_SYSTEM_RECORD_ID,
    min(cal.valid_from) valid_from,
	MIN(CAL.ALERT_COMMENT) ALERT_COMMENT,
	MIN(CAL.MESSAGE) CALMESSAGE
    from
    cms_wd_re_execution_stats s
    join cms_wd_re_execution e on e.cluid = s.cluid
    join cms_partner p on p.cluid = s.cluid
    join cms_client_alert cal on cal.partner_id = p.id and cal.category = '5' and cal.type = '157' AND cal.SOURCE_SYSTEM_ID = 'CN0' and cal.active = 1
    where 1=1
    and s.curr_del >= s.curr_ins
    group by e.cluid, e.cadastre_procedure_number
    )
  ) x
group by x.cluid, x.pt_Type, x.SOURCE_SYSTEM_RECORD_ID, x.valid_from, X.ALERT_COMMENT, x.CALMESSAGE
]]>
			</value>
		</property>
	</bean>
	
	<bean id="step8Task" class="cz.csas.colmanbatch.task.StoredProcedureTask" scope="step">
		<property name="sql">
			<value>
<![CDATA[
BEGIN
/* -- step 8 - update WatchdogLastExecutionWarningMessageId  - we do not want to do this!!! */
update wdp_system_property set
VALUE = (select max(id) from cms_wd_procedure)
where id = 'cscollateral/watchdog/WatchdogLastExecutionWarningMessageId' and 1=0
;
END;
]]>
			</value>
		</property>
	</bean>	
	
	<bean id="step9Task" class="cz.csas.colmanbatch.task.StoredProcedureTask" scope="step">
		<property name="sql">
			<value>
<![CDATA[
BEGIN
/* -- step 9 - remove the resolved records statistics */
delete from cms_wd_re_execution_stats s where s.curr_del >= s.curr_ins;
END;
]]>
			</value>
		</property>
	</bean>	
	
	<bean id="step10Task" class="cz.csas.colmanbatch.task.StoredProcedureTask" scope="step">
		<property name="sql">
			<value>
<![CDATA[
BEGIN
/* -- step 10 - remove the resolved records */
delete from cms_wd_re_execution e where e.cluid not in (select cluid from cms_wd_re_execution_stats);
END;
]]>
			</value>
		</property>
	</bean>	
	
	<bean id="step11Task" class="cz.csas.colmanbatch.task.StoredProcedureTask" scope="step">
		<property name="sql">
			<value>
<![CDATA[
BEGIN
/* -- step 11 - update the statistics to reflect current status */
update cms_wd_re_execution_stats set
last_ins = curr_ins,
last_del = curr_del
where (last_ins != curr_ins or last_del != curr_del)
;
END;
]]>
			</value>
		</property>
	</bean>	

	<bean id="CrmExport_cleanup_prod_1Writer" parent="parentCrmExport_cleanup_prod_1Writer" scope="step">		
		<property name="extractName" value="PN" />	
		<property name="manager" ref="CrmExport_cleanup_prod_1Manager" />
		<property name="metadataProvider" ref="CrmExport_cleanup_prod_1Reader" />																																																																															
	</bean>
	
	<bean id="CrmExport_cleanup_prod_1Processor" parent="CrmExport_cleanup_prod_1ItemProcessor" scope="step">
		<property name="fieldSpecificMapping">
			<map>
    	  	</map>	
		</property>			
	</bean>	
	
	
<!-- ================ Common ================ -->	
	<bean id="CrmExport_cleanup_prod_1Manager"  parent="parentExportManager">
		<property name="createSummaryFile" value="true" />
		<property name="summaryFileWriteColumnsHeader" value="false" />		
		<property name="summaryFileCode" value="AA" />
		<property name="exportDirectory" value="${CrmCollValueExport.resources}" />
		<property name="agendaCode" value="CNCR" />
		<property name="sourceSystem" value="Colman" />		
		<property name="sourceSystemCsopsCode" value="${sourceNodeName}" />
		<property name="targetSystemCsopsCode" value="${targetNodeName}" />
		<property name="summaryFileColumns">
			<value>EXTRACT_AGENDA_CODE,EXTRACT_NAME,EXTRACT_FILE_NAME,EXTRACT_START_TIME,EXTRACT_END_TIME,EXTRACT_RECORD_COUNT,EXTRACT_SOURCE_SYSTEM,EXTRACT_VERSION,EXTRACT_INCREMENT_FLAG,EXTRACT_DATA_FROM_DATE</value>
		</property>		
		<property name="csopsHeaderWriter">
			<bean parent="CrmExport_cleanup_prod_1CsopsHeaderWriter">		
				<property name="writeStandardHeader" value="false" />	
			</bean>
		</property>
		<property name="lineSeparator">
			<ref bean="lineSeparatorLf" />
		</property>					
		<property name="encoding" value="ISO-8859-2" />	
	</bean>
		

	<bean id="CrmExport_cleanup_prod_1ItemProcessor" parent="parentFormatter">
		<property name="itemExtractor" ref="linkedHashMapExtrator" />
		<property name="defaultMappings">
		      <map key-type="java.lang.Class" value-type="java.text.Format">
        		<entry>
        			<key><value type="java.lang.Class">java.util.Date</value></key>
        			<ref bean="dateFormat-yyyy.MM.dd"/>
        		</entry>        			
      		</map>
		</property>
	</bean>

	<bean id="parentCrmExport_cleanup_prod_1Writer" parent="parentCSOPSExportWriter" abstract="true">		
		<property name="lineSeparator">
			<ref bean="lineSeparatorLf" />
		</property>	
		<property name="encoding" value="ISO-8859-2" />		
		<property name="headerCallback" ref="CrmExport_cleanup_prod_1CsopsHeaderFileCallback" />
		<property name="footerCallback">
			<bean class="cz.csas.colmanbatch.addons.csops.CSOPSFooterFileCallback" >
				<property name="endOfFileMark"><value>END OF FILE</value></property>
			</bean>
		</property>																																																																																		
		
	</bean>	

	<bean id="CrmExport_cleanup_prod_1CsopsHeaderFileCallback" parent="parentCsopsHeaderFileCallback">
		<property name="csopsHeaderWriter">
			<ref bean="CrmExport_cleanup_prod_1CsopsHeaderWriter" />
		</property>
	</bean>	

	<bean id="CrmExport_cleanup_prod_1CsopsHeaderWriter" parent="csopsHeaderWriter">
		<property name="lineSeparator">
			<ref bean="lineSeparatorLf" />
		</property>	
		<property name="writeStandardHeader" value = "true"/>
		<property name="fieldNamesDelimiter" value="|" />	
		<property name="writeColumnsHeader" value = "false"/>		
	</bean>	
</beans>
